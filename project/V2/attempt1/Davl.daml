-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Davl where -- TODO: Should this name include the version?

-- V2
-- following proposal doc.. plus
-- rename: employee -> worker
-- TODO: visibiliy of vacations for all

import DA.List as List


template Propose_Boss
  with
    b : Boss
  where
    signatory b.company
    observer b.boss
    choice Propose_Boss_Accept : ContractId Boss
      controller b.boss
        do
          create b


template Boss -- Boss Role
  with
    boss : Party
    company : Party
  where
    signatory boss, company

    -- TODO: company remove Ross role from someone

    -- company make Worker proposals, with boss's authority
    nonconsuming choice Boss_Propose_Worker : ContractId Propose_Worker
      with
        worker : Party
      controller company
        do
          create Propose_Worker with w = Worker with worker; boss; company

    -- company has this boss take over an existing worker
    nonconsuming choice Boss_Takeover_Worker : ContractId Worker
      with
        w : ContractId Worker
      controller company
        do
          exercise w Worker_Change_Boss with newBoss = boss


template Propose_Worker
  with
    w : Worker
  where
    signatory w.boss, w.company
    observer w.worker
    choice Propose_Worker_Accept : ContractId Worker
      controller w.worker
        do
          create Allocation with worker = w.worker; company = w.company; hols = []
          create w


-- TODO: top level contract for Worker's work-flow
-- finding by key the current Worker contract


template Worker -- Worker Role
  with
    worker : Party
    boss : Party
    company : Party
  where
    signatory worker, boss, company

    -- TODO: contract key so we can find the current Worker contract

    -- company can change a workers boss
    choice Worker_Change_Boss : ContractId Worker
      with
        newBoss : Party
      controller company
        do
          create Worker with worker; boss = newBoss; company

    -- boss makes holiday allocation with worker/company's authority
    nonconsuming choice Worker_Allocate_Holiday : [ContractId Holiday]
      with
        n : Int -- how many days
      controller boss
        do
          newHols <- mapA create (replicate n (Holiday with worker; boss; company))
          exerciseByKey @Allocation worker Allocation_Add with newHols
          return newHols

    -- employee makes vacation request with boss/company's authority
    nonconsuming choice Worker_Request_Vacation : ContractId Request
      with
        dates : [Date]
      controller worker
        do
          create Request with vac = Vacation with worker; boss; company; dates


template Request -- aka Propose_Vacation
  with
    vac : Vacation
  where
    signatory vac.worker, vac.company
    observer vac.boss

    -- boss approves vacation request, with company/worker authority
    choice Request_Approve : ContractId Vacation
      controller vac.boss
        do
          -- delegate to spend the workers allocation
          exerciseByKey @Allocation vac.worker Allocation_Spend with vac

    -- boss denies vacation request, with everyone's authority
    choice Request_Deny : ContractId Denial
      with
        reason : Text
      controller vac.boss
        do
          create Denial with vac; reason

    -- TODO: timeout, to allow self-approve of the boss does not deal with the request


type Hols = [ContractId Holiday]

template Allocation -- Store of Holiday per Worker
  with
    worker : Party
    company : Party
    hols : Hols
  where
    signatory worker, company
    key worker : Party
    maintainer key

    choice Allocation_Add : ContractId Allocation
      with
        newHols : Hols
      controller worker
        do
          create Allocation with worker; company; hols = hols ++ newHols

    choice Allocation_Spend : ContractId Vacation
      with
        vac : Vacation
      controller worker
        do
          let n = length vac.dates
          let (spentHols,remainingHols) = List.splitAt n hols
          assert (length spentHols == n)
          mapA archive spentHols
          create Allocation with worker; company; hols = remainingHols
          create vac



template Holiday
  with
    worker : Party
    boss : Party
    company : Party
  where
    signatory worker, company
    observer boss


template Vacation
  with
    worker : Party
    boss : Party
    company : Party
    dates : [Date] -- Multi-date vacation
  where
    signatory worker, company
    observer boss


template Denial
  with
    vac : Vacation
    reason : Text
  where
    signatory vac.worker, vac.boss, vac.company -- everyone signs!
