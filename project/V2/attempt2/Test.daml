daml 1.2

module Test where

import Davl
import DA.Date


simpler_flow = scenario do

  company <- getParty "the-company"
  dilbert <- getParty "dilbert"
  alice <- getParty "alice"

  ac <- submit company $ create AsCompany with company
  ad <- submit dilbert $ create AsWorker with worker = dilbert
  aa <- submit alice $ create AsWorker with worker = alice
  aab <- submit alice $ create AsBoss with boss = alice

  submit company $ exercise ac AsCompany_CreateVacationStore

  -- Dilbert becomes a worker for the company and gets 1 day holiday allocation
  p1 <- submit company $ exercise ac AsCompany_ProposeWorker with worker = dilbert
  submit dilbert $ exercise ad AsWorker_AcceptProposeWorker with proposal = p1
  [_] <- submit company $ exercise ac AsCompany_AllocateHoliday with worker = dilbert; nDays = 1

  -- Dilbert makes a Holiday requests, of 1 day
  let xmas : Date = date 2019 Dec 25
  submit dilbert $ exercise ad AsWorker_RequestVacation with dates = [xmas]

  -- Alice becomes a worker, and Dilbert's boss
  proposal <- submit company $ exercise ac AsCompany_ProposeWorker with worker = alice
  submit alice $ exercise aa AsWorker_AcceptProposeWorker with proposal
  submit company $ exercise ac AsCompany_AddManagement with boss = alice; minion = dilbert

  -- No vacations yet
  [] <- submit alice $ exercise aa AsWorker_GetEveryonesVacation
  [] <- submit dilbert $ exercise ad AsWorker_GetEveryonesVacation

  -- Alice approves Dilert's request
  [req] <- submit alice $ exercise aab AsBoss_GetMinionRequests
  submit alice $ exercise aab AsBoss_ApproveMinionRequest with req

  -- Alice and Dilert can see the vacation
  [_] <- submit alice $ exercise aa AsWorker_GetEveryonesVacation
  [_] <- submit dilbert $ exercise ad AsWorker_GetEveryonesVacation

  return ()


longer_flow = scenario do

  company <- getParty "the-company"
  dilbert <- getParty "dilbert"
  pointy <- getParty "pointy-haired-boss"
  alice <- getParty "alice"

  ac <- submit company $ create AsCompany with company

  ad <- submit dilbert $ create AsWorker with worker = dilbert
  ap <- submit pointy $ create AsWorker with worker = pointy
  aa <- submit alice $ create AsWorker with worker = alice

  adb <- submit dilbert $ create AsBoss with boss = dilbert
  apb <- submit pointy $ create AsBoss with boss = pointy
  aab <- submit alice $ create AsBoss with boss = alice

  submit company $ exercise ac AsCompany_CreateVacationStore

  -- Dilbert becomes a worker for the company and gets 3 days holiday allocation
  p1 <- submit company $ exercise ac AsCompany_ProposeWorker with worker = dilbert
  submit dilbert $ exercise ad AsWorker_AcceptProposeWorker with proposal = p1
  0 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidays
  0 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidaysWithoutPendingRequests
  [_,_,_] <- submit company $ exercise ac AsCompany_AllocateHoliday with worker = dilbert; nDays = 3
  3 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidays
  3 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidaysWithoutPendingRequests

  -- Dilbert makes two Holiday requests, each of 2 days
  let xmas : Date = date 2019 Dec 25
  let boxing : Date = date 2019 Dec 26
  submit dilbert $ exercise ad AsWorker_RequestVacation with dates = [xmas,boxing]
  [_] <- submit dilbert $ exercise ad AsWorker_GetPending
  3 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidays
  1 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidaysWithoutPendingRequests

  let newYearEve : Date = date 2019 Dec 31
  let newYearDay : Date = date 2020 Jan 01
  submit dilbert $ exercise ad AsWorker_RequestVacation with dates = [newYearEve,newYearDay]
  [_,_] <- submit dilbert $ exercise ad AsWorker_GetPending
  3 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidays
  (-1) <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidaysWithoutPendingRequests

  -- Pointy becomes a worker too, but is not yet the boss of Dilbert
  proposal <- submit company $ exercise ac AsCompany_ProposeWorker with worker = pointy
  submit pointy $ exercise ap AsWorker_AcceptProposeWorker with proposal
  [] <- submit dilbert $ exercise ad AsWorker_GetBosses
  [] <- submit pointy $ exercise apb AsBoss_GetMinions
  [] <- submit pointy $ exercise apb AsBoss_GetMinionRequests

  -- Pointy gets Dilbert as a minion, and so can see Dilbert's requests
  submit company $ exercise ac AsCompany_AddManagement with boss = pointy; minion = dilbert
  [b1] <- submit dilbert $ exercise ad AsWorker_GetBosses
  assertMsg "dilbert, bosses, b1" (b1==pointy)
  [m1] <- submit pointy $ exercise apb AsBoss_GetMinions
  assertMsg "pointy, minions, b1" (m1==dilbert)
  [_,_] <- submit pointy $ exercise apb AsBoss_GetMinionRequests

  -- Alice starts work, and becomes a 2nd boss of Dilbert
  proposal <- submit company $ exercise ac AsCompany_ProposeWorker with worker = alice
  submit alice $ exercise aa AsWorker_AcceptProposeWorker with proposal
  [] <- submit alice $ exercise aab AsBoss_GetMinions
  submit company $ exercise ac AsCompany_AddManagement with boss = alice; minion = dilbert
  [_] <- submit alice $ exercise aab AsBoss_GetMinions
  [_,_] <- submit alice $ exercise aab AsBoss_GetMinionRequests
  [_] <- submit pointy $ exercise apb AsBoss_GetMinions
  [_,_] <- submit pointy $ exercise apb AsBoss_GetMinionRequests
  [_,_] <- submit dilbert $ exercise ad AsWorker_GetBosses

  -- Pointy is removed from being Dilbert's boss
  submit company $ exercise ac AsCompany_RemoveManagement with boss = pointy; minion = dilbert
  [] <- submit pointy $ exercise apb AsBoss_GetMinionRequests
  [b2] <- submit dilbert $ exercise ad AsWorker_GetBosses
  assertMsg "dilbert, bosses, b2" (b2==alice)

  -- Dilbert Cancels one of his two requests (relies on ordering, but we could choose by date)
  [rLast,_] <- submit dilbert $ do exercise ad AsWorker_GetPending
  submit dilbert $ exercise ad AsWorker_CancelRequest with req = rLast
  [rOnly] <- submit dilbert $ exercise ad AsWorker_GetPending
  [rOnly'] <- submit alice $ exercise aab AsBoss_GetMinionRequests
  assertMsg "alice, see Dilbert's only request" (rOnly==rOnly')
  3 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidays
  1 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidaysWithoutPendingRequests

  -- Pointy is not able to approve Dilbert's request
  submitMustFail pointy $ exercise apb AsBoss_ApproveMinionRequest with req = rOnly

  -- Dilbert is not able to approve his own request
  submitMustFail dilbert $ exercise adb AsBoss_ApproveMinionRequest with req = rOnly

  -- Alice can approve Dilbert's request
  submit alice $ exercise aab AsBoss_ApproveMinionRequest with req = rOnly
  [] <- submit dilbert $ exercise ad AsWorker_GetPending
  [] <- submit alice $ exercise aab AsBoss_GetMinionRequests
  1 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidays
  1 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidaysWithoutPendingRequests

  -- Everyone can see the booked vacation
  [_] <- submit alice $ exercise aa AsWorker_GetEveryonesVacation
  [_] <- submit dilbert $ exercise ad AsWorker_GetEveryonesVacation
  [v] <- submit pointy $ exercise ap AsWorker_GetEveryonesVacation

  let Vacation{worker=w,dates=[d1,d2]} = v
  assert (w == dilbert)
  assert (d1 == xmas)
  assert (d2 == boxing)

  -- Dilbert, re-requests his new-year's vacation
  submit dilbert $ exercise ad AsWorker_RequestVacation with dates = [newYearEve,newYearDay]
  1 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidays
  (-1) <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidaysWithoutPendingRequests

  -- Alice cannot appove that request even if she want to, because Dilbert does not have enough holiday
  [req] <- submit alice $ exercise aab AsBoss_GetMinionRequests
  submitMustFail alice $ exercise aab AsBoss_ApproveMinionRequest with req

  -- Company grants Dilbert 3 more days of holiday allocation
  [_,_,_] <- submit company $ exercise ac AsCompany_AllocateHoliday with worker = dilbert; nDays = 3
  4 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidays
  2 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidaysWithoutPendingRequests

  -- And now alice can approve
  [req] <- submit alice $ exercise aab AsBoss_GetMinionRequests
  submit alice $ exercise aab AsBoss_ApproveMinionRequest with req
  2 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidays
  2 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidaysWithoutPendingRequests

  -- And everyone can see the now 2 booked vacations
  [_,_] <- submit alice $ exercise aa AsWorker_GetEveryonesVacation
  [_,_] <- submit dilbert $ exercise ad AsWorker_GetEveryonesVacation
  [_,_] <- submit pointy $ exercise ap AsWorker_GetEveryonesVacation

  -- Another request from Dilbert
  let valentines : Date = date 2020 Feb 14
  submit dilbert $ exercise ad AsWorker_RequestVacation with dates = [valentines]
  2 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidays
  1 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidaysWithoutPendingRequests

  -- But Alice denies this one
  [req] <- submit alice $ exercise aab AsBoss_GetMinionRequests
  [] <- submit dilbert $ exercise ad AsWorker_GetDenials
  d1 <- submit alice $ exercise aab AsBoss_DenyMinionRequest with req; reason = "sorry"
  2 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidays
  2 <- submit dilbert $ exercise ad AsWorker_CountUnspentHolidaysWithoutPendingRequests
  [_] <- submit dilbert $ exercise ad AsWorker_GetDenials

  return ()

