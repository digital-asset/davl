-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Davl where -- V2, Attempt 2. -- WIP, see ../redesign.text

import DA.List as List

-- TODO: split this DAML code over multiple files


template AsCompany -- workflow
  with
    company : Party
  where
    signatory company

    nonconsuming choice AsCompany_CreateVacationStore : ContractId VacationStore
      controller company
        do
          create VacationStore with company; obs = []; vacs = []

    nonconsuming choice AsCompany_ProposeWorker : ContractId ProposeWorker
      with
        worker : Party
      controller company
        do
          exerciseByKey @VacationStore company VacationStore_AddObserver with ob = worker
          create ProposeWorker with
              w = Worker with worker; company; bosses = []; minions = []; requests = []; denials = []

    nonconsuming choice AsCompany_AllocateHoliday : [ContractId Holiday]
      with
        worker : Party
        nDays : Int
      controller company
        do
          exerciseByKey @Worker worker Worker_AllocateHoliday with nDays

    nonconsuming choice AsCompany_AddManagement : ()
      with
        boss : Party
        minion : Party
      controller company
        do
          exerciseByKey @Worker boss Worker_AddMinion with minion
          exerciseByKey @Worker minion Worker_AddBoss with boss
          exerciseByKey @Allocation minion Allocation_AddObserver with ob = boss
          return ()

    nonconsuming choice AsCompany_RemoveManagement : ()
      with
        boss : Party
        minion : Party
      controller company
        do
          exerciseByKey @Worker boss Worker_RemoveMinion with minion
          exerciseByKey @Worker minion Worker_RemoveBoss with boss
          exerciseByKey @Allocation minion Allocation_RemoveObserver with ob = boss
          return ()


template AsWorker -- workflow
  with
    worker : Party
  where
    signatory worker

    nonconsuming choice AsWorker_GetEveryonesVacation : [Vacation]
      controller worker
        do
          exerciseByKey @Worker worker Worker_GetEveryonesVacation

    nonconsuming choice AsWorker_AcceptProposeWorker : ContractId Worker
      with
        proposal : ContractId ProposeWorker
      controller worker
        do
          exercise proposal ProposeWorker_Accept

    nonconsuming choice AsWorker_RequestVacation : ContractId Request
      with
        dates : [Date]
      controller worker
        do
          exerciseByKey @Worker worker Worker_RequestVacation with dates

    nonconsuming choice AsWorker_CancelRequest : ()
      with
        req : ContractId Request
      controller worker
        do
          exerciseByKey @Worker worker Worker_CancelRequest with req

    nonconsuming choice AsWorker_GetPending : [ContractId Request]
      controller worker
        do
          (_,w) <- fetchByKey @Worker worker
          return w.requests

    nonconsuming choice AsWorker_GetDenials : [ContractId Denial]
      controller worker
        do
          (_,w) <- fetchByKey @Worker worker
          return w.denials

    nonconsuming choice AsWorker_GetBosses : [Party]
      controller worker
        do
          (_,w) <- fetchByKey @Worker worker
          return w.bosses

    nonconsuming choice AsWorker_CountUnspentHolidays : Int
      controller worker
        do
          (_,a) <- fetchByKey @Allocation worker
          return (length a.hols)

    nonconsuming choice AsWorker_CountUnspentHolidaysWithoutPendingRequests : Int
      controller worker
        do
          (_,a) <- fetchByKey @Allocation worker
          (_,w) <- fetchByKey @Worker worker
          rs <- mapA fetch w.requests
          return (length a.hols - length (concatMap (\r -> r.vac.dates) rs))


template AsBoss -- workflow -- TODO: don't bother to distinguish from AsWorker
  with
    boss : Party
  where
    signatory boss

    nonconsuming choice AsBoss_GetMinions : [Party]
      controller boss
        do
          (_,w) <- fetchByKey @Worker boss
          return w.minions

    nonconsuming choice AsBoss_GetMinionRequests : [ContractId Request]
      controller boss
        do
          exerciseByKey @Worker boss Worker_GetMinionRequests

    nonconsuming choice AsBoss_ApproveMinionRequest : ContractId Vacation
      with
        req : ContractId Request
      controller boss
        do
          exerciseByKey @Worker boss Worker_ApproveMinionRequest with req

    nonconsuming choice AsBoss_DenyMinionRequest : ContractId Denial
      with
        req : ContractId Request
        reason : Text
      controller boss
        do
          exerciseByKey @Worker boss Worker_DenyMinionRequest with req; reason; boss


template VacationStore
  with
    company : Party
    obs : [Party]
    vacs : [Vacation]
  where
    signatory company
    observer obs
    key company : Party
    maintainer key

    choice VacationStore_AddObserver : ContractId VacationStore
      with
        ob : Party
      controller company
        do
          create this with obs = ob::obs

    choice VacationStore_AddVacation : ContractId VacationStore
      with
        vac : Vacation
      controller company
        do
          create this with vacs = vac::vacs


template ProposeWorker
  with
    w : Worker
  where
    signatory w.company
    observer w.worker
    choice ProposeWorker_Accept : ContractId Worker
      controller w.worker
        do
          create Allocation with worker = w.worker; company = w.company; obs = []; hols = []
          create w


template Worker --Relationship
  with
    worker : Party
    company : Party

    -- TODO: keep holiday allocation here, instead of separate allocations
    requests : [ContractId Request] -- our requests
    bosses : [Party] -- workers who can approve our vacation requests
    minions : [Party] -- workers whose vacation requests we can approve
    denials : [ContractId Denial] -- requests we made which got denied

  where
    signatory worker, company
    observer bosses

    key worker : Party
    maintainer key

    nonconsuming choice Worker_GetEveryonesVacation : [Vacation]
      controller worker
        do
          (_,s) <- fetchByKey @VacationStore company
          return s.vacs

    choice Worker_AddBoss : ContractId Worker
      with
        boss : Party
      controller company
        do
          -- TODO: nub (dont re-add boss)
          requests <- mapA (\r  -> exercise r Request_AddObserver with ob = boss) requests
          create this with bosses = boss::bosses; requests

    choice Worker_RemoveBoss : ContractId Worker
      with
        boss : Party
      controller company
        do
          requests <- mapA (\r  -> exercise r Request_RemoveObserver with ob = boss) requests
          create this with bosses = filter (/= boss) bosses; requests

    nonconsuming choice Worker_GetMinionRequests : [ContractId Request]
      controller worker
        do
          ws <- mapA (fmap snd . fetchByKey @Worker) minions
          return $ concatMap (.requests) ws

    nonconsuming choice Worker_ApproveMinionRequest : ContractId Vacation
      with
        req : ContractId Request
      controller worker
        do
          minionRequests <- exercise self Worker_GetMinionRequests
          assert (req `elem` minionRequests)
          Request{vac} <- fetch req
          exerciseByKey @Worker vac.worker Worker_ApproveMyRequest with req

    choice Worker_ApproveMyRequest : ContractId Vacation
      with
        req : ContractId Request
      controller company
        do
          vac <- exercise req Request_Approve
          create this with requests = filter (/= req) requests
          v <- fetch vac
          exerciseByKey @VacationStore company VacationStore_AddVacation with vac = v
          return vac

    nonconsuming choice Worker_DenyMinionRequest : ContractId Denial
      with
        req : ContractId Request
        reason : Text
        boss : Party
      controller worker
        do
          minionRequests <- exercise self Worker_GetMinionRequests
          assert (req `elem` minionRequests)
          Request{vac} <- fetch req
          exerciseByKey @Worker vac.worker Worker_DenyMyRequest with req; reason; boss

    choice Worker_DenyMyRequest : ContractId Denial
      with
        req : ContractId Request
        reason : Text
        boss : Party
      controller company, boss
        do
          d <- exercise req Request_Deny with reason; boss
          create this with requests = filter (/= req) requests; denials = d::denials
          return d

    nonconsuming choice Worker_AllocateHoliday : [ContractId Holiday]
      with
        nDays : Int
      controller company
        do
          assert (nDays > 0)
          newHols <- mapA create (replicate nDays (Holiday with worker; company; obs = bosses))
          exerciseByKey @Allocation worker Allocation_Add with newHols
          return newHols

    choice Worker_AddMinion : ContractId Worker
      with
        minion : Party
      controller company
        do
          -- TODO: nub (dont re-add minion)
          create this with minions = minion::minions

    choice Worker_RemoveMinion : ContractId Worker
      with
        minion : Party
      controller company
        do
          create this with minions = filter (/= minion) minions

    choice Worker_RequestVacation : ContractId Request
      with
        dates : [Date]
      controller worker
        do
          r <- create Request with vac = (Vacation with worker; company; dates); obs = bosses
          create this with requests = r::requests
          return r

    choice Worker_CancelRequest : ()
      with
        req : ContractId Request
      controller worker
        do
          archive req
          create this with requests = filter (/= req) requests
          return ()


template Allocation -- Store of Holiday per Worker
  with
    worker : Party
    company : Party
    obs : [Party]
    hols : [ContractId Holiday]
  where
    signatory worker, company
    observer obs

    key worker : Party
    maintainer key

    choice Allocation_AddObserver : ContractId Allocation
      with
        ob : Party
      controller company
        do
          hols1 <- mapA (\h -> exercise h Holiday_AddObserver with ob) hols
          create this with obs = ob::obs; hols = hols1

    choice Allocation_RemoveObserver : ContractId Allocation
      with
        ob : Party
      controller company
        do
          hols1 <- mapA (\h -> exercise h Holiday_RemoveObserver with ob) hols
          create this with obs = filter (/=ob) obs; hols = hols1

    choice Allocation_Add : ContractId Allocation
      with
        newHols : [ContractId Holiday]
      controller company
        do
          create this with hols = hols ++ newHols

    choice Allocation_Spend : ContractId Vacation
      with
        vac : Vacation
      controller worker
        do
          let n = length vac.dates
          let (spentHols,remainingHols) = List.splitAt n hols
          assert (length spentHols == n)
          mapA archive spentHols
          create this with hols = remainingHols
          create vac


template Request -- aka Propose_Vacation
  with
    vac : Vacation
    obs : [Party]
  where
    signatory vac.worker
    observer obs

    choice Request_AddObserver : ContractId Request
      with
        ob : Party
      controller vac.company
        do
          create this with obs = ob::obs

    choice Request_RemoveObserver : ContractId Request
      with
        ob : Party
      controller vac.company
        do
          create this with obs = filter (/=ob) obs

    choice Request_Approve : ContractId Vacation
      controller vac.company
        do
          exerciseByKey @Allocation vac.worker Allocation_Spend with vac

    choice Request_Deny : ContractId Denial
      with
        boss : Party
        reason : Text
      controller vac.company, boss
        do
          create Denial with vac; boss; reason


template Holiday
  with
    worker : Party
    company : Party
    obs : [Party]
  where
    signatory worker, company
    observer obs

    choice Holiday_AddObserver : ContractId Holiday
      with
        ob : Party
      controller company
        do
          create this with obs = ob::obs

    choice Holiday_RemoveObserver : ContractId Holiday
      with
        ob : Party
      controller company
        do
          create this with obs = filter (/=ob) obs


template Vacation
  with
    worker : Party
    company : Party
    dates : [Date] -- Multi-date vacation
  where
    signatory worker, company

    -- TODO: allow visability to everyone (authorized by the company)
    -- either by adding/removing observers, as we do in other places
    -- or by using the ValidatedCopy idiom.


template Denial
  with
    vac : Vacation
    reason : Text
    boss : Party
  where
    signatory vac.worker, vac.company, boss
