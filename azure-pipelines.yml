# Enable builds on all branches
trigger:
  # Build every commit as our release process relies on
  # the release process being built alone.
  batch: false
  branches:
    include:
      - master

# Enable PR triggers that target the master branch
pr:
  autoCancel: true # cancel previous builds on push
  branches:
    include:
      - master

jobs:
  - job: build_and_test
    timeoutInMinutes: 120
    pool:
      vmImage: "Ubuntu-16.04"
    variables:
      is_master: $[ eq(variables['Build.SourceBranch'], 'refs/heads/master') ]
    steps:
      - checkout: self

      # Install DAML SDK, possibly from cache
      - bash: |
          set -euo pipefail
          cp SDK_VERSION /tmp/SDK_VERSION
      - task: CacheBeta@1
        inputs:
          key: /tmp/SDK_VERSION
          path: /tmp/daml
          cacheHitVar: DAML_CACHE_HIT
      - bash: |
          set -euo pipefail
          DIR=$(pwd)

          # Install DAML SDK
          SDK_VERSION=$(cat SDK_VERSION)
          curl https://get.daml.com | sh -s $SDK_VERSION

          mkdir -p /tmp/daml
          cd $HOME/.daml
          tar czf /tmp/daml/sdk.tar.gz *
        condition: ne(variables.DAML_CACHE_HIT, 'true')
        displayName: daml-cache-miss
      - bash: |
          set -euo pipefail
          mkdir -p $HOME/.daml
          cd $HOME/.daml
          tar xzf /tmp/daml/sdk.tar.gz
        condition: eq(variables.DAML_CACHE_HIT, 'true')
        displayName: daml-cache-hit

      # Build and test TypeScript
      - bash: |
          set -euo pipefail

          yarn --version
          export PATH=$HOME/.daml/bin:$PATH
          daml codegen js -o daml2ts released/*.dar
          yarn install --frozen-lockfile
          yarn workspaces run build
          yarn workspaces run lint
          CI=yes yarn workspace davl-ui test --ci --all
        displayName: build-and-test-ts

      # Deploy
      - bash: |
          set -euo pipefail

          export PATH=$HOME/.daml/bin:$PATH

          docker/build-images.sh

        env:
          GCS_CREDS: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)
          BUILD_NUMBER: $(Build.BuildId)
          SLACK_URL: $(Slack.URL)
        displayName: create-docker-images
        condition: in(variables['Build.SourceBranch'], 'refs/heads/master', 'master')

      - bash: |
          set -euo pipefail

          tell_slack () {
              local MESSAGE=$(git log --pretty=format:%s -n1)
              curl -XPOST \
                   -i \
                   -H 'Content-type: application/json' \
                   --data "{\"text\":\"<https://dev.azure.com/digitalasset/davl/_build/results?buildId=$(Build.BuildId)|$MESSAGE>:\n$1\n\"}" \
                   $(Slack.URL)
          }

          # Install Terraform, so we pin the version regardless of what Azure
          # provides; fortunately terraform is a single, self-contained
          # executable.
          TF_DIR=$(mktemp -d)
          TF_VER="0.12.24"
          wget https://releases.hashicorp.com/terraform/${TF_VER}/terraform_${TF_VER}_linux_amd64.zip -O $TF_DIR/tf.zip
          ( cd $TF_DIR; unzip tf.zip )
          terraform=$TF_DIR/terraform

          # Deploying new code should be a routine change that CI can
          # automate, but changing the shape of the infrastructure should
          # not. Therefore, CI should only attempt to apply the terraform
          # files when it can verify that:
          # 1. The parent commit applies with no changes, and
          # 2. The only changes to infra in the current commit are in the
          #    versions file.
          previous_commit_reflects_deployment () {
              local current_sha=$(git rev-parse HEAD)
              local previous_sha=$(git rev-parse HEAD~)
              git checkout $previous_sha
              set +e
              # returns 0 if no changes to apply, 1 on error and 2 if changes
              $terraform plan -detailed-exitcode -var-file=deployed-versions.tfvars
              local result=$?
              set -e
              git checkout $current_sha
              return $result
          }

          current_commit_changes_infra () {
              # returns 0 if output is non-empty, i.e. if there is at least one
              # file in the infra folder that changed (besides the
              # deployed-versions one)
              git show --pretty="format:" --name-only -- . | grep -v infra/deployed-versions.tfvars
          }

          current_commit_changes_versions () {
              # returns 0 if output is non-empty, i.e. deployed-versions has
              # changed
              git show --pretty="format:" --name-only -- . | grep infra/deployed-versions.tfvars
          }

          export GOOGLE_APPLICATION_CREDENTIALS=$(mktemp)
          cleanup () {
              rm -f $GOOGLE_APPLICATION_CREDENTIALS
          }
          trap cleanup EXIT
          echo "$GOOGLE_APPLICATION_CREDENTIALS_CONTENT" > $GOOGLE_APPLICATION_CREDENTIALS
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS

          cd infra
          $terraform init

          echo "Sanity check for Terraform config."
          # `terraform plan` checks the difference between the tf files and
          # the current (real) state of the deployed system and emits a plan
          # for what would need to be changed, but doesn't actually change
          # anything. The goal here is to check that:
          # 1. The Terraform files are (still) well-formed, and
          # 2. The CI runner still has all the permissions it needs to at least
          #    check if anything needs to be redeployed.
          $terraform plan -var-file=deployed-versions.tfvars
          # "False" is the string returned by Azure expressions for the boolean
          # value false.
          if [ "$IS_MASTER" = "False" ]; then
            # We're on a PR so we stop here.
            exit 0
          fi

          if previous_commit_reflects_deployment; then
              if current_commit_changes_infra; then
                  tell_slack "<!here> *WARNING*: Latest commit changes infra. Please apply manually."
              else
                  if current_commit_changes_versions; then
                      if $terraform apply -auto-approve -var-file=deployed-versions.tfvars; then
                          tell_slack "started deployment of:\n\`\`\`$(cat deployed-versions.tfvars | jq -Rs . | sed 's/^"//' | sed 's/"$//')\`\`\`"
                          sleep 10
                          # There is a race condition whereby the ui server
                          # gets removed from the load balancing pool if its
                          # name has not changed. Applying the same file again
                          # gets Terraform to notice and correc tthe
                          # inconsistency. This is not the most elegant way to
                          # solve it, but should work for now.
                          $terraform apply -auto-approve -var-file=deployed-versions.tfvars
                      else
                          tell_slack "<!here> *ERROR*: failed to deploy"
                      fi
                  else
                      echo "Nothing to do."
                  fi
              fi
          else
              tell_slack "<!here> *ERROR*: current infra has diverged from master. Manual correction required."
          fi
        env:
          GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)
          IS_MASTER: $(is_master)
        displayName: deploy

      - bash: |
          set -euo pipefail
          MESSAGE=$(git log --pretty=format:%s -n1)
          curl -XPOST \
               -i \
               -H 'Content-type: application/json' \
               --data "{\"text\":\"<!here> *FAILED* $(Agent.JobName): <https://dev.azure.com/digitalasset/davl/_build/results?buildId=$(Build.BuildId)|$MESSAGE>\n\"}" \
               $(Slack.URL)
        condition: and(failed(), in(variables['Build.SourceBranchName'], 'refs/heads/master', 'master'))
        displayName: tell-slack-if-failed
