daml 1.2
module DAVL.V6 where

import DA.Date qualified as Date

template EmployeeRole with
    employee: Party
    company: Party
    boss: Party
  where
    signatory [employee, company]

    key employee: Party
    maintainer key

    nonconsuming choice EmployeeRole_RequestVacation: ContractId VacationRequest with
        fromDate: Date
        toDate: Date
      controller employee
      do
        let vacation = Vacation with
              employeeRole = this
              fromDate
              toDate
        create VacationRequest with vacation

template EmployeeProposal with
    employeeRole: EmployeeRole
    vacationDays: Int
  where
    let EmployeeRole{..} = employeeRole
    signatory company
    observer employee

    nonconsuming choice EmployeeProposal_Accept: ()
      controller employee
      do
        archive self
        create employeeRole
        create EmployeeVacationAllocation with
          employeeRole = employeeRole
          remainingDays = vacationDays
        pure ()

template EmployeeVacationAllocation with
    employeeRole: EmployeeRole
    remainingDays: Int
  where
    let EmployeeRole{..} = employeeRole
    signatory [employee, company]
    observer boss

    key employee: Party
    maintainer key

    ensure remainingDays >= 0

    nonconsuming choice EmployeeVacationAllocation_AddDays: () with
        days: Int
      controller company
      do
        assertMsg "negative additional vacation" $ days >= 0
        archive self
        create this with remainingDays = remainingDays + days
        pure ()

template VacationRequest with
    vacation: Vacation
  where
    let Vacation{..} = vacation
        EmployeeRole{..} = employeeRole
    signatory [employee, company]
    observer boss

    ensure fromDate <= toDate

    nonconsuming choice VacationRequest_Accept: ContractId Vacation
      controller boss
      do
        let days = Date.subDate toDate fromDate + 1
        (allocationId, allocation) <- fetchByKey @EmployeeVacationAllocation (key employeeRole)
        assertMsg "mismatching employee in vacation request" $ employeeRole == allocation.employeeRole
        let remainingDays = allocation.remainingDays - days
        assertMsg "allocation too small" $ remainingDays >= 0
        archive allocationId
        create allocation with remainingDays
        archive self
        create vacation

    nonconsuming choice VacationRequest_Cancel: ()
      controller employee
      do
        archive self

template Vacation with
    employeeRole: EmployeeRole
    fromDate: Date
    toDate: Date
  where
    let EmployeeRole{..} = employeeRole
    signatory [employee, company, boss]

    nonconsuming choice Vacation_RequestCancel: ContractId VacationCancelRequest
      controller employee
      do
        -- We might want to check that the vacation hasn't already
        -- started or passed, but you can imagine situations where
        -- you want to cancel past vacation, e.g. you get called in
        -- to work anyway for an urgent task. In any case the boss
        -- needs to approve the cancel request for it to take effect.
        create VacationCancelRequest with vacationId = self, vacation = this

template VacationCancelRequest with
    vacationId: ContractId Vacation
    vacation: Vacation
  where
    let Vacation{..} = vacation
        EmployeeRole{..} = employeeRole

        -- Ensure the cancel request corresponds to an active vacation.
        validateVacation: Update ()
        validateVacation = do
          vacation' <- fetch vacationId
          assertMsg "Vacation ID does not match provided vacation details" $ vacation' == vacation

    signatory [employee, company]
    observer boss

    -- Ensure at most one cancel request per vacation.
    key vacation: Vacation
    maintainer key.employeeRole.employee

    nonconsuming choice VacationCancelRequest_Withdraw: ()
      controller employee
      do
        validateVacation
        archive self

    nonconsuming choice VacationCancelRequest_Reject: ()
      controller boss
      do
        validateVacation
        archive self

    nonconsuming choice VacationCancelRequest_Accept: ContractId EmployeeVacationAllocation
      controller boss
      do
        validateVacation
        archive self
        archive vacationId
        -- Restore vacation days to employee allocation.
        (allocationId, allocation) <- fetchByKey @EmployeeVacationAllocation (key employeeRole)
        assertMsg "Employee details in vacation allocation do not match those in vacation cancel request" $
          allocation.employeeRole == employeeRole
        let days = Date.subDate toDate fromDate + 1
        let remainingDays = allocation.remainingDays + days
        archive allocationId
        create allocation with remainingDays

createEmployee: Party -> Text -> Party -> Int -> Scenario Party
createEmployee company employee boss vacationDays = do
  employee <- getParty employee
  let employeeRole = EmployeeRole{..}
  proposalId <- submit company do
    create EmployeeProposal{..}
  submit employee do
    exercise proposalId EmployeeProposal_Accept
  pure (key employeeRole)

assertRemainingDays: Party -> Int -> Scenario ()
assertRemainingDays employee days = do
  (_, allocation) <- submit employee do
    fetchByKey @EmployeeVacationAllocation employee
  assert $ allocation.remainingDays == days

test = scenario do
  da <- getParty "Digital Asset"
  yuval <- getParty "Yuval"

  yuval <- createEmployee da "Yuval" da 25
  shaul <- createEmployee da "Shaul" yuval 25

  let nye2019 = Date.date 2019 Date.Dec 31
  requestId <- submit shaul do
    exerciseByKey @EmployeeRole shaul EmployeeRole_RequestVacation with
      fromDate = Date.addDays nye2019 (-1)
      toDate = Date.addDays nye2019 3
  vacationId <- submit yuval do
    exercise requestId VacationRequest_Accept

  vacation <- submit shaul do
    fetch vacationId
  (_, shaulEmployee) <- submit shaul do
    fetchByKey @EmployeeRole shaul
  assert $ vacation.employeeRole == shaulEmployee

  assertRemainingDays shaul 20

  -- Cancellation requests
  cancelRequest <- submit shaul do
    exercise vacationId Vacation_RequestCancel
  -- Cannot request to cancel same vacation twice
  submitMustFail shaul do
    exercise vacationId Vacation_RequestCancel
  submit shaul do
    exercise cancelRequest VacationCancelRequest_Withdraw
  -- Vacation still active
  submit shaul do fetch vacationId
  submitMustFail shaul do fetch cancelRequest
  assertRemainingDays shaul 20

  cancelRequest2 <- submit shaul do
    exercise vacationId Vacation_RequestCancel
  submit yuval do
    exercise cancelRequest2 VacationCancelRequest_Reject
  -- Vacation still active
  submit shaul do fetch vacationId
  submitMustFail shaul do fetch cancelRequest2
  assertRemainingDays shaul 20

  cancelRequest3 <- submit shaul do
    exercise vacationId Vacation_RequestCancel
  submit yuval do
    exercise cancelRequest3 VacationCancelRequest_Accept
  -- Vacation should be archived and allocation added
  submitMustFail shaul do fetch vacationId
  submitMustFail shaul do fetch cancelRequest3
  assertRemainingDays shaul 25

  let dd2020 = Date.date 2020 Date.Apr 3
  requestId <- submit shaul do
    exerciseByKey @EmployeeRole shaul EmployeeRole_RequestVacation with
      fromDate = dd2020
      toDate = dd2020
  submit shaul do
    exercise requestId VacationRequest_Cancel
  submitMustFail yuval do
    exercise requestId VacationRequest_Accept
  assertRemainingDays shaul 25

  submit da do
    exerciseByKey @EmployeeVacationAllocation shaul EmployeeVacationAllocation_AddDays with days = 2
  assertRemainingDays shaul 27

  pure ()
