daml 1.2
module Test where

import DA.Date
import DA.Optional

import V3Instances ()
import DAVL.V3 qualified as V3
import DAVL.V4 qualified as V4
import Upgrade qualified as U

employee = fromSome $ partyFromText "Employee"
company = fromSome $ partyFromText "Company"
boss = fromSome $ partyFromText "Boss"

employeeRole = V3.EmployeeRole with employee; company; boss
employeeProposal = V3.EmployeeProposal with employeeRole; vacationDays = 25
allocation = V3.EmployeeVacationAllocation with employeeRole; remainingDays = 25
vacationFromDate = date 2019 Dec 2
vacationToDate = date 2019 Dec 6
vacation = V3.Vacation with
  employeeRole
  fromDate = vacationFromDate
  toDate = vacationToDate

createEmployee () = do
  employeeRoleId <- submit company do create employeeProposal
  submit employee do exercise employeeRoleId V3.EmployeeProposal_Accept

createVacationRequest: () -> Scenario (ContractId V3.VacationRequest)
createVacationRequest () = do
  submit employee do
    exerciseByKey @V3.EmployeeRole employee V3.EmployeeRole_RequestVacation with
      fromDate = vacationFromDate
      toDate = vacationToDate


createUpgradeAgreement () = do
  upgradeProposalId <- submit company do
    create U.UpgradeProposal with employee; company
  submit employee do
    exercise upgradeProposalId U.UpgradeProposal_Accept

-- Check that upgrading an employee role and the corresponding vacation
-- allocaiton works.
testUpgradeEmployeeRole = scenario do
  -- Setup
  createEmployee ()
  -- Upgrade
  upgradeAgreementId <- createUpgradeAgreement ()
  -- Old contracts are gone
  submitMustFail company do fetchByKey @V3.EmployeeRole employee
  submitMustFail company do fetchByKey @V3.EmployeeVacationAllocation employee
  -- Employee role got upgraded
  (_, employeeRoleV4) <- submit company do
    fetchByKey @V4.EmployeeRole employee
  assert $ U.upgradeEmployeeRole employeeRole == employeeRoleV4
  -- Vacation allocation got upgraded
  (_, allocationV4) <- submit company do
    fetchByKey @V4.EmployeeVacationAllocation employee
  assert $ U.upgradeEmployeeVacationAllocation allocation == allocationV4

-- Check that upgrading a vacation request works.
testUpgradeVacationRequest = scenario do
  -- Setup
  createEmployee ()
  requestId <- createVacationRequest ()
  -- Upgrade
  upgradeAgreementId <- createUpgradeAgreement ()
  requestV4Id <- submit company do
    exercise upgradeAgreementId U.UpgradeAgreement_UpgradeVacationRequest with requestId
  -- Old request is gone
  submitMustFail company do fetch requestId
  -- Request got upgraded
  requestV4 <- submit company do fetch requestV4Id
  assert $ U.upgradeVacationRequest (V3.VacationRequest with vacation) == requestV4

-- Check that upgrading an approved vacation works.
testUpgradeVacation = scenario do
  -- Setup
  createEmployee ()
  let bossEmployeeRole = V3.EmployeeRole with
        employee = boss; company; boss = company
  bossEmployeeProposalId <- submit company do
    create V3.EmployeeProposal with
      employeeRole = bossEmployeeRole
      vacationDays = 25
  submit boss do exercise bossEmployeeProposalId V3.EmployeeProposal_Accept
  requestId <- createVacationRequest ()
  vacationId <- submit boss do exercise requestId V3.VacationRequest_Accept
  -- Upgrade
  employeeAgreementId <- createUpgradeAgreement ()
  bossProposalId <- submit company do
    create U.UpgradeProposal with employee = boss; company
  bossAgreementId <- submit boss do
    exercise bossProposalId U.UpgradeProposal_Accept
  vacationV4Id <- submit company do
    exercise bossAgreementId U.UpgradeAgreement_UpgradeVacation with
      employeeAgreementId; vacationId
  -- Old vacation gone
  submitMustFail company do fetch vacationId
  -- Vacation got upgraded
  vacationV4 <- submit company do fetch vacationV4Id
  assert $ U.upgradeVacation vacation == vacationV4
