-- DAVL v4 to v5 upgrades:
-- - Issue v4/v5 upgrade proposals;
-- - Accept upgrade proposals.
-- - Upgrade vacations and requests.

daml 1.2
module Automation (init, accept, finish)
where

import Prelude hiding (submit, submitMustFail)
import Daml.Script
import Daml.Script qualified as S
import Daml.Trigger
import Daml.Trigger qualified as T
import DAVL.V4 qualified as V4
import Upgrade qualified as V4V5
import DA.Foldable qualified as F
import DA.Optional
import DA.Next.Map qualified as Map
import DA.Action

data LedgerParties = LedgerParties {company : Party}

init : LedgerParties -> Script ()
init LedgerParties {company} = do
  employeeRoles <- fmap snd <$> query @V4.EmployeeRole company
  F.forA_ employeeRoles $
   \V4.EmployeeRole {employee, company, ..} -> do
     existingProposal <- query @V4V5.UpgradeProposal employee
     if null existingProposal
       then do
        void $ submit company $ do
          debug ("Creating upgrade proposal for " <> show employee)
          S.createCmd (V4V5.UpgradeProposal {employee,  company})
       else do
         debug ("Skip creating upgrade proposal for " <> show employee <>
                " (a proposal already exists)")
         pure ()

accept : LedgerParties -> Script ()
accept LedgerParties {company} = do
  upgradeProposals <- query @V4V5.UpgradeProposal company
  F.forA_ upgradeProposals $
    \(proposalId, V4V5.UpgradeProposal {employee, company}) -> do
      void $ submit employee $ do
        debug ("Accepting upgrade proposal for " <> show employee)
        S.exerciseCmd proposalId V4V5.UpgradeProposal_Accept

finish : Trigger ()
finish  =
  Trigger {
    initialize = \_ -> ()
  , updateState = \_ _ _ -> ()
  , rule = upgradeRule
  , registeredTemplates = AllInDar
  , heartbeat = None
  }

upgradeRule : Party -> ACS -> Time -> Map.Map CommandId [Command] -> ()
  -> TriggerA ()
upgradeRule party acs _ _ _ = do
  let upgradeAgreements =
        getContracts @V4V5.UpgradeAgreement acs
  F.forA_ upgradeAgreements $
    \(employeeAgreementId, V4V5.UpgradeAgreement {employee}) -> do
      let vacationRequests =
            [r | r@(_, s) <- getContracts @V4.VacationRequest acs
               , s.vacation.employeeRole.employee == employee
               ]
      F.forA_ vacationRequests $ \(requestId, request) -> do
        debug ("Upgrading vacation request [" <>
               show request.vacation.fromDate <> ", " <>
               show request.vacation.toDate <>  "] for " <>
               show request.vacation.employeeRole.employee
              )
        void $ T.emitCommands [
          T.exerciseCmd employeeAgreementId
            V4V5.UpgradeAgreement_UpgradeVacationRequest {..}
          ] [toAnyContractId requestId]
      let vacations =
            [r | r@(_, s) <- getContracts @V4.Vacation acs
               , s.employeeRole.employee == employee
               ]
      F.forA_ vacations $ \(vacationId, vacation) -> do
        optional (pure ())
          (\bossAgreementId  -> do
             debug ("Upgrading vacation [" <>
                     show vacation.fromDate <> ", " <> show vacation.toDate <>
                     "] for " <> show employee)
             void $ T.emitCommands [
               T.exerciseCmd bossAgreementId
                 V4V5.UpgradeAgreement_UpgradeVacation {..}
               ] [toAnyContractId vacationId]
            )
          (listToOptional [id | (id, s) <- upgradeAgreements
                              , s.employee == vacation.employeeRole.boss])
